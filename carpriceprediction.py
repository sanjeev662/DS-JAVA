# -*- coding: utf-8 -*-
"""CarPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hjmfrCRjyfSR2hdxXpCEOUrszTdGzFnB
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from scipy import stats
import numpy

car_dataset = pd.read_csv('/content/CarData.csv')

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset['Selling_Price']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state=2)

lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train,Y_train)
training_data_prediction = lin_reg_model.predict(X_train)

slope, intercept, r, p, std_err = stats.linregress(Y_train,training_data_prediction)

def myfunc(Y_train):
  return slope * Y_train + intercept

mymodel = list(map(myfunc,Y_train))
plt.scatter(Y_train, training_data_prediction)
plt.plot(Y_train, mymodel)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices")
plt.show()

#for price prediction
z=int(input("input the actual data : "))
predicted=myfunc(z)
pre="predicted price of car : {}"
print(pre.format(predicted))
val="value of r : {}"
print(val.format(r))

#for value of r2
mymodel= numpy.poly1d(numpy.polyfit(Y_train,training_data_prediction, 3))
r2=r2_score(training_data_prediction, mymodel(Y_train))
txtr2="value of r2 : {}"
print(txtr2.format(r2))

#for histogram
plt.hist(Y_train)
plt.show()

#for mean price of cars
pricemean=numpy.mean(Y_train)
txtmean="mean selling price of cars : {}"
print(txtmean.format(pricemean))

#for median price of cars
pricemedian=numpy.median(Y_train)
txtmedian="median selling price of cars : {}"
print(txtmedian.format(pricemedian))

#for mean price of cars
pricemode=stats.mode(Y_train)
txtmode="mode selling price of cars : {}"
print(txtmode.format(pricemode[0]))